--- 
title: "HIV PREVALENCE, HIV AND TB MORTALITY 2000 - 2011"
author: "Ester Nepolo"
format: 
  dashboard:
    logo: images/LOGO_IMAGE.png
    nav-buttons: [github]
    github: https://github.com/YOUR_URL
theme: lux
execute:
  echo: false
  warning: false
  message: false
---


```{r}
# Load packages 
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, 
               here,
               visdat,
               inspectdf,
               sf,
               bslib, 
               bsicons,
               rnaturalearth, 
               plotly, 
               countrycode, 
               htmltools, 
               reactable,
               janitor
               )

```


```{r}
# Load and inspect data
total_hiv_infection <- read_csv(here("data/people_living_with_hiv_number_all_ages.csv"))

annual_hiv_deaths <- read_csv(here("data/annual_hiv_deaths_number_all_ages.csv"))

annual_est_tb_deaths<- read_csv("data/all_forms_of_tb_number_of_deaths_estimated.csv")

# Display summary 
# str(total_hiv_infection)
# str(annual_hiv_deaths)
# str(annual_est_tb_deaths)

# Create visdat plot
# vis_dat(total_hiv_infection,
#         sort_type = F) # this makes sure that years are plotted in chronological order

##Show plot of total cases dataset
# inspect_cat(total_hiv_infection) %>% 
# show_plot()
# 
# # Create visdat plot
# vis_dat(annual_hiv_deaths, sort_type = F) # this makes sure that years are plotted in chronological order
# 
# ##Show plot of new cases dataset
# inspect_cat(annual_hiv_deaths) %>% 
# show_plot()
# 
# # Create visdat plot
# vis_dat(annual_est_tb_deaths, sort_type = F) # this makes sure that years are plotted in chronological order
# 
# ##Show plot of new cases dataset
# inspect_cat(annual_est_tb_deaths) %>% 
# show_plot()

```
```{r}
# Data cleaning
## Pivoting datasets from wider to long formats for easier analysis

# Total HIV infection, limiting it to 10 years for easy comparison

total_hiv_infection_long <- total_hiv_infection %>%
  select("2000":"2011", "country") %>%  pivot_longer(cols = -country, names_to = "year", values_to = "total_cases")

# total_hiv_infection_long

# Annual HIV deaths

annual_hiv_deaths_long <- pivot_longer(annual_hiv_deaths, cols = 2:23, names_to = "year", values_to = "hiv_deaths")

# annual_hiv_deaths_long

# Estimated Annual TB deaths in all forms of TB, limiting it to 10 years for easy comparison 
annual_est_tb_deaths_longer <- pivot_longer(annual_est_tb_deaths, cols = 2:22, names_to = "year", values_to = "est_tb_deaths")

# annual_est_tb_deaths_longer


```
```{r cases-to-numeric-total, warning=FALSE}
# Convert data types in total_hiv_infection_long from chr to num

total_hiv_infection_numeric <- total_hiv_infection_long %>%
  mutate(
    # Convert year to numeric
    year = as.numeric(year),
    # Remove 'k' and 'M' and convert to numeric
    total_cases_numeric = case_when(
     str_detect(total_cases, 'k$') ~ as.numeric(str_remove(total_cases, 'k')) * 1000,
    str_detect(total_cases, 'M$') ~ as.numeric(str_remove(total_cases, 'M')) * 1000000,
    TRUE ~ as.numeric(total_cases)
  ))

# total_hiv_infection_numeric


# Convert data types in annual_hiv_deaths_long from chr to num

annual_hiv_deaths_numeric <- annual_hiv_deaths_long %>%
  mutate(
    # Convert year to numeric
    year = as.numeric(year),
    # Remove 'k' and 'M' and convert to numeric
    hiv_deaths_numeric = case_when(
      str_detect(hiv_deaths, 'k$') ~ as.numeric(str_remove(hiv_deaths, 'k')) * 1000,
      str_detect(hiv_deaths, 'M$') ~ as.numeric(str_remove(hiv_deaths, 'M')) * 1000000,
      TRUE ~ as.numeric(hiv_deaths)
    ))
 
# annual_hiv_deaths_numeric


# Convert data types in annual_est_tb_deaths_long from chr to num

annual_est_tb_deaths_numeric <- annual_est_tb_deaths_longer %>%
  mutate(
    # Convert year to numeric
    year = as.numeric(year),
    # Remove 'k' and 'M' and convert to numeric
    est_tb_deaths_numeric = case_when(
      str_detect(est_tb_deaths, 'k$') ~ as.numeric(str_remove(est_tb_deaths, 'k')) * 1000,
      str_detect(est_tb_deaths, 'M$') ~ as.numeric(str_remove(est_tb_deaths, 'M')) * 1000000,
      TRUE ~ as.numeric(est_tb_deaths)
    ))

# annual_est_tb_deaths_numeric


```

```{r join-datasets}

# setdiff(x = total_hiv_infection_numeric$country, y = annual_hiv_deaths_numeric$country)
# 
# setdiff(x = annual_hiv_deaths_numeric$country, y = total_hiv_infection_numeric$country)
# 
# 
# setdiff(x = total_hiv_infection_numeric$country, y = annual_est_tb_deaths_numeric$country)
# 
# setdiff(x = annual_est_tb_deaths_numeric$country, y = total_hiv_infection_numeric$country)


# First join total infection and annual hiv deaths datasets
hiv_data_combined <- left_join(total_hiv_infection_numeric, annual_hiv_deaths_numeric,
by=c("country", "year"))

# hiv_data_combined

# Then join estimated tb dataset to the hiv_data_combined to make the hiv_tb_deaths_data_combined

hiv_tb_deaths_data_combined <- left_join(hiv_data_combined, annual_est_tb_deaths_numeric,
by=c("country", "year"))

# hiv_tb_deaths_data_combined

```

```{r}
# Adding population data

##We can get population per country-year from the `tidyr::population` dataset. 

pop <- tidyr::population

#pop

#However, before joining `hiv_data_combined` to this dataset by country name, we need to check if the country names match. 


# setdiff(hiv_tb_deaths_data_combined$country, pop$country)

#add ISO codes to each dataset for a consistent joining

hiv_tb_deaths_data_combined <- hiv_tb_deaths_data_combined %>%
  mutate(country_iso = countrycode(country, 
                                   "country.name", 
                                   "iso3c"))

# hiv_tb_deaths_data_combined


# Add 3- letter ISO code to pop
pop_iso <- pop %>%
  mutate(country_iso = countrycode(country,
"country.name","iso3c"))

# pop_iso


# Join with population on ISO code
final_dataset <- left_join(hiv_tb_deaths_data_combined,
pop_iso, by = c("country_iso", "year"))


# final_dataset

```


```{r}
# Summarise data

highest_hiv_cases_country <- final_dataset %>%
  mutate(hiv_cases_per_100k = (total_cases_numeric / population) * 100000) %>%
  arrange(-hiv_cases_per_100k) %>%
  head(1) %>% 
  pull(country.x)

highest_hiv_cases_country_value <- final_dataset %>% 
  mutate(hiv_cases_per_100k = (total_cases_numeric / population) * 100000) %>%
  arrange(-hiv_cases_per_100k) %>%
  head(1) %>% 
  pull(hiv_cases_per_100k) %>% 
  round(1)

lowest_hiv_cases_country <- final_dataset %>%
  mutate(hiv_cases_per_100k = (total_cases_numeric / population) * 100000) %>%
  arrange(hiv_cases_per_100k) %>%
  head(1) %>% 
  pull(country.x)

lowest_hiv_cases_country_value <- final_dataset %>% 
  mutate(hiv_cases_per_100k = (total_cases_numeric / population) * 100000) %>%
  arrange(hiv_cases_per_100k) %>%
  head(1) %>% 
  pull(hiv_cases_per_100k) %>% 
  round(1)

highest_hiv_annual_deaths_country <- final_dataset %>%
  mutate(hiv_deaths_per_100k = (hiv_deaths_numeric / population) * 100000) %>%
  arrange(-hiv_deaths_per_100k) %>%
  head(1) %>% 
  pull(country.x)

highest_hiv_annual_deaths_country_value <- final_dataset %>% 
  mutate(hiv_deaths_per_100k = (hiv_deaths_numeric / population) * 100000)%>%
  arrange(-hiv_deaths_per_100k) %>%
  head(1) %>% 
  pull(hiv_deaths_per_100k) %>% 
  round(1)


lowest_hiv_annual_deaths_country <- final_dataset %>%
  mutate(hiv_deaths_per_100k = (hiv_deaths_numeric / population) * 100000) %>%
  arrange(hiv_deaths_per_100k) %>%
  head(1) %>% 
  pull(country.x)

lowest_hiv_annual_deaths_country_value <- final_dataset %>% 
  mutate(hiv_deaths_per_100k = (hiv_deaths_numeric / population) * 100000)%>%
  arrange(hiv_deaths_per_100k) %>%
  head(1) %>% 
  pull(hiv_deaths_per_100k) %>% 
  round(1)


highest_tb_annual_deaths_country <- final_dataset %>%
  mutate(tb_deaths_per_100k = (est_tb_deaths_numeric / population) * 100000)%>%
  arrange(-tb_deaths_per_100k)%>%
  head(1) %>%
  pull(country.x)


highest_tb_annual_deaths_country_value <- final_dataset %>%
  mutate(tb_deaths_per_100k = (est_tb_deaths_numeric / population) * 100000)%>%
  arrange(-tb_deaths_per_100k)%>%
  head(1) %>%
  pull(tb_deaths_per_100k) %>% 
  round(1)
  

lowest_tb_annual_deaths_country <- final_dataset %>%
  mutate(tb_deaths_per_100k = (est_tb_deaths_numeric / population) * 100000)%>%
  arrange(tb_deaths_per_100k)%>%
  head(1) %>%
  pull(country.x)


lowest_tb_annual_deaths_country_value <- final_dataset %>%
  mutate(tb_deaths_per_100k = (est_tb_deaths_numeric / population) * 100000)%>%
  arrange(tb_deaths_per_100k)%>%
  head(1) %>%
  pull(tb_deaths_per_100k) %>% 
  round(1)


```



```{r}
# Visualize HIV cases data for the top 20 countries in 2011
Plot_top20_countries <- final_dataset %>%
  filter(year == 2011) %>%
  arrange(desc(total_cases_numeric / population * 100000)) %>%
  head(20) %>%
  mutate(tooltip_label = paste(country.x, 
                               round(total_cases_numeric / population * 100000, 1), 
                               sep = ": ")) %>%
  ggplot(aes(x = total_cases_numeric / population * 100000, 
             y = fct_reorder(country.x, total_cases_numeric / population * 100000), 
             fill = round(total_cases_numeric / population * 100000, 1), 
             text = tooltip_label)) +
  geom_col() +
  scale_fill_gradient(low = "lightpink", high = "maroon", name = "Cases per 100k Pop") +
  labs(x = "Number of Cases per 100,000 Population", y = NULL) + 
  theme_minimal() +
  theme(legend.position = "right")

# Convert to interactive plot with plotly
Plot_top20_countries_interactive <- ggplotly(Plot_top20_countries, tooltip = "text")




```


```{r}
#  Load the natural earth countries dataset
 countries <- rnaturalearth::ne_countries(returnclass = "sf") %>%
    select(country_iso = adm0_a3, geometry)
  
 # Filter and join the datasets
 final_dataset <- countries %>%
   left_join(final_dataset, by = "country_iso")
 
 
 # str(final_dataset)
 # 
 # summary(final_dataset)
 
 # Global correlation plot
 mortality_correlation_plot <- final_dataset %>% 
   ggplot(aes(x = hiv_deaths_numeric, y = est_tb_deaths_numeric, frame = year)) +
   geom_point(size =  2) +
   geom_smooth() +
   #scale_x_log10() +
   theme_minimal() +
   labs(x = "HIV-related deaths",
        y = "TB deaths",
        color = "Country")
 
 mortality_correlation_plotly <- ggplotly(mortality_correlation_plot)



```


```{r}

# Create the map plot with animation
Plot_map <- 
  final_dataset %>%
  filter(year == 2011) %>% 
  # Create a tool tip
  mutate(tooltip_label = paste(country.x, 
                               round(total_cases_numeric / population * 100000, 1), 
                               sep = ": ")) %>%
  ggplot() +
  geom_sf(aes(fill = total_cases_numeric / population * 100000, 
              text = tooltip_label)) +
  scale_fill_gradient(low = "lightpink", high = "maroon", name = "Cases per 100k Pop") +
  theme_void() + 
  theme(legend.position = "right")
#+
 # transition_time(year) 

Plot_map_ggplotly <- 
  ggplotly(Plot_map, tooltip = "text") 



```


# HOME 

## Row 1 {height="25%"}

```{r}
value_box(
  title = "Highest HIV cases per 100k population",
  value = highest_hiv_cases_country_value,
  showcase = bsicons::bs_icon("heart-pulse"),
  theme = value_box_theme(bg = "#800000"),
  p(paste0("(", 
           highest_hiv_cases_country, ")"))
)
```
```{r}
value_box(
  title = "Lowest HIV cases per 100k population",
  value = lowest_hiv_cases_country_value,
  showcase = bsicons::bs_icon("shield-check"),
  theme = value_box_theme(bg = "#FA8072"),
  p(paste0("(", lowest_hiv_cases_country, ")"))
)

```


```{r}
value_box(
  title = "Highest HIV mortality per 100k population",
  value = highest_hiv_annual_deaths_country_value,
  showcase = bsicons::bs_icon("shield-plus"),
  theme = value_box_theme(bg = "#b8040d"),
  p(paste0("(", 
           highest_hiv_annual_deaths_country, ")"))
)
```

```{r}
value_box(
  title = "Highest TB mortality per 100k population",
  value = highest_tb_annual_deaths_country_value,
  showcase = bsicons::bs_icon("shield-plus"),
  theme = value_box_theme(bg = "#b86a04"),
  p(paste0("(", 
           highest_tb_annual_deaths_country, ")"))
)
```


## Row 2 {height="75%"}

### {width="60%"}

```{r title = "Global HIV Prevalence in 2011"}

Plot_map_ggplotly

```


### {width="40%"}

```{r title = "Top 20 countries with high HIV Prevalence in 2011"}
Plot_top20_countries_interactive
```


# CORRELATIONS

```{r title = "Correlation between annual HIV Mortality and annual estimated TB Mortality globally from 2000 - 2011"}

mortality_correlation_plotly
```

# DOWNLOAD DATA

The data used in this dashboard is shown below and can be downloaded as a CSV.

```{r}
library(htmltools)

htmltools::browsable(
  tagList(
    reactable(final_dataset, 
              elementId = "hiv_tb_mortality_table", 
              searchable = T, 
              filterable = T), 
    
tags$button("Download as CSV", 
            onclick = "Reactable.downloadDataCSV('hiv_tb_mortality_table')")
  )
)
```

# ABOUT

This analysis about the HIV Prevalence and the Correlation between TB and HIV Mortality used the data provided by the GRAPH COURSES as part of the RMASTER CLASS final project. Data is sourced from the Gapminder Foundation.

The Gapminder Foundation is a non-profit venture registered in Stockholm, Sweden, that promotes sustainable global development and achievement of the United Nations Millennium Development Goals by increased use and understanding of statistics and other information about social, economic, and environmental development at local, national, and global levels.

Gapminder was founded in 2005 by Ola Rosling, Anna Rosling Rönnlund, and Hans Rosling. The name Gapminder was derived from the "Mind the Gap" warning messages on the London Underground.

The data used for this analysis is limited from 2000 to 2011 to allow joining of the HIV deaths and TB deaths datasets. Whereas the HIV data is available for the years before 1990 and ended in 2011, the TB data is only from the year 2000 onwards. 

It is also worth noting that the HIV related deaths data used are the actual annual deaths reported, while the TB deaths data is based on the annual estimates of TB deaths, not on actual deaths.